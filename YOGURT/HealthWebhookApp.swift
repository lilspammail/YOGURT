// HealthWebhookApp.swift
// YOGURT

import SwiftUI
import BackgroundTasks

@main
struct HealthWebhookApp: App {
    // –ú–æ—Å—Ç –∫ UIKit-–¥–µ–ª–µ–≥–∞—Ç—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ BG-–∑–∞–¥–∞—á –∏ HealthKit-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    @UIApplicationDelegateAdaptor(AppDelegate.self) var appDelegate

    var body: some Scene {
        WindowGroup {
            ContentView()
        }
    }

    class AppDelegate: UIResponder, UIApplicationDelegate {
        func application(
            _ application: UIApplication,
            didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
        ) -> Bool {
            // 1Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            BGTaskScheduler.shared.register(
                forTaskWithIdentifier: "com.yourcompany.HealthWebhookApp.hourlyUpload",
                using: nil
            ) { task in
                UploadService.shared.handleHourly(task: task as! BGProcessingTask)
            }

            // 2Ô∏è‚É£ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ HealthKit –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            HealthKitManager.shared.requestAuthorization { success, error in
                guard success else {
                    print("‚ùå HealthKit auth failed:", error ?? "Unknown")
                    return
                }
                print("‚úÖ HealthKit auth granted")
                UploadService.shared.scheduleHourly()

                NotificationManager.shared.setupHourlyReminders()
            }

            return true
        }

        func applicationDidBecomeActive(_ application: UIApplication) {
            print("üîî App became active ‚Äî forcing data sync")
            UploadService.shared.debugSendHourlyNow()
        }
    }
    
}
